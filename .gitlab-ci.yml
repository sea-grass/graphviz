stages:
    - source
    - build
    - test
    - deploy

portable-source:
    stage: source
    tags:
        - linux
    image: "graphviz/graphviz:ubuntu-18.04"
    script:
        - ./autogen.sh
        - make dist
    artifacts:
        when: on_success
        expire_in: 1 week
        paths:
            - VERSION
            - DATE
            - COLLECTION
            - graphviz-*.tar.gz
    except:
        - tags

.build_template: &rpm_build_definition
    stage: build
    script:
        - ci/build.sh
    artifacts:
        when: on_success
        expire_in: 1 week
        paths:
            - Packages/*/*/*/*/*/*.rpm
            - Packages/*/*/*/*/*.rpm
            - Metadata/*/*/*/configure.log
    except:
        - tags

.build_template: &deb_build_definition
    stage: build
    script:
        - ci/build.sh
    artifacts:
        when: on_success
        expire_in: 1 week
        paths:
            - Packages/*/*/*/*/*/*deb
            - Packages/*/*/*/*/*.gz
            - Metadata/*/*/*/configure.log
    except:
        - tags

.build_template: &windows_build_definition
    stage: build
    script:
        # Toolchain definitions
        - if($env:platform -eq "x64") {
            $TARGET_ARCH = "x64";
          }
          else {
            $TARGET_ARCH = "x86";
          }
        # Retrieve submodules, dependencies are stored there.
        - git submodule update --init
        # Install and set PATH
        - choco install --no-progress -y activeperl
        - choco install --no-progress -y python3
        - choco install --no-progress -y grep
        - $Env:Path += ";C:\Python38"
        - $Env:Path += ";C:\Python38\Scripts"
        - pip install pytest
        - $Env:Path += ";$env:CI_PROJECT_DIR\windows\dependencies\graphviz-build-utilities"
        - $Env:Path += ";C:\Program Files\CMake\bin"
        - $Env:Path += ";C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\MSBuild\Current\Bin"
        - $Env:Path += ";C:\Program Files (x86)\NSIS\Bin"
        - $Env:graphviz_install_dir = "C:\Graphviz"
        # Build
        - >-
            if($env:build_system -eq "cmake") {
              choco install --no-progress -y cmake;
              choco install --no-progress -y NSIS;
              mkdir build;
              cd build;
              cmake -G "$env:generator" -A $Env:platform ..;
              cmake --build . --config $env:configuration;
              cd ..;
            }
            elseif($env:build_system -eq "msbuild") {
              msbuild /p:Configuration=$env:configuration
            }
        # Package
        - $GV_VERSION=$( cat VERSION )
        - >-
            if($env:platform -eq "x64") {
                $API = "win64";
            } else {
                $API = "win32";
            }
        - >-
            if($env:configuration -eq "Release") {
              if($env:build_system -eq "cmake") {
                cd build;
                C:\"Program Files"\CMake\bin\cpack
                cd ..;
              }
              elseif($env:build_system -eq "msbuild") {
                rm Release\Graphviz\bin\*.lastcodeanalysissucceeded;
                rm Release\Graphviz\bin\*.iobj;
                rm Release\Graphviz\bin\*.ipdb;
                rm Release\Graphviz\bin\*.ilk;
              }
            }
        # Test
        - >-
            if($env:build_system -eq "cmake" -and $env:configuration -eq "Release") {
              cd build;
              dir;
              $FILENAME = & invoke-Expression "Get-ChildItem Graphviz*.exe";
              mv $FILENAME graphviz-install.exe;
              dir;
              # Install using installer and add bin directory to path.
              # Piping the output of the installer to Out-Null, makes the script wait
              # for the .exe to exit, instead continuing to the next command (which
              # will then fail because the install hasn't finished)
              ./graphviz-install.exe /S /D=$env:graphviz_install_dir | Out-Null;
              mv graphviz-install.exe graphviz-install-$GV_VERSION-$API.exe;
              $env:Path += ";" + $env:graphviz_install_dir + "\bin"
              dot -c;
              ctest -C $env:configuration;
              cd ..;
              cmd.exe /c "call `"C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC\Auxiliary\Build\vcvarsall.bat`" $TARGET_ARCH && set > %temp%\vcvars.txt";
              Get-Content "$env:temp\vcvars.txt" | Foreach-Object {
                if ($_ -match "^(.*?)=(.*)$") {
                  Set-Content "env:\$($matches[1])" $matches[2];
                }
              }
              $Env:INCLUDE += ";C:\Graphviz\include";
              $Env:LIB += ";C:\Graphviz\lib";
              pytest -s rtest\test_examples.py;
            }
            elseif($env:build_system -eq "msbuild") {
              # Append build destination to the PATH, configure dot and execute regression tests
              # The following is per https://gitlab.com/graphviz/graphviz/-/merge_requests/1345
              $env:Path = $env:CI_PROJECT_DIR + "\" + $env:configuration + "\Graphviz\bin" + ";" + $env:Path;
              dot -c;
              cd tests\regression_tests;
              ./regression_tests.ps1;
              cd ..\..;
            }
        # Create artifacts to archive
        - $ID = "windows"
        - $VERSION_ID = "10"
        - $COLLECTION = $( cat COLLECTION )
        - $DIR = "Packages\${COLLECTION}\${ID}\${VERSION_ID}\$env:build_system\$env:configuration\$Env:platform"
        - mkdir -p $DIR
        - >-
            if($env:build_system -eq "cmake") {
                mv "build\*.exe" $DIR;
            } else {
                Compress-Archive -Path "$env:configuration\*" -DestinationPath "$DIR\graphviz-$GV_VERSION-$API.zip";
            }
    artifacts:
        when: on_success
        expire_in: 1 week
        paths:
        - Packages/*/*/*/*/*/*/*.exe
        - Packages/*/*/*/*/*/*/*.zip
    tags:
        - windows

.test_template: &test_definition
    stage: test
    script:
        - ci/test.sh
    artifacts:
        reports:
            junit: ./report.xml

centos6-build:
    <<: *rpm_build_definition
    tags:
        - linux
    image: "graphviz/graphviz:centos6"

centos7-build:
    <<: *rpm_build_definition
    tags:
        - linux
    image: "graphviz/graphviz:centos7"

centos8-build:
    <<: *rpm_build_definition
    tags:
        - linux
    image: "graphviz/graphviz:centos8"

          #fedora27-build:
          #<<: *rpm_build_definition
          #tags:
          #- graphviz,fedora27

          #fedora28-build:
          #<<: *rpm_build_definition
          #tags:
          #- graphviz,fedora28

fedora29-build:
    <<: *rpm_build_definition
    tags:
        - linux
    image: "graphviz/graphviz:fedora29"

fedora30-build:
    <<: *rpm_build_definition
    tags:
        - linux
    image: "graphviz/graphviz:fedora30"

fedora31-build:
    <<: *rpm_build_definition
    tags:
        - linux
    image: "graphviz/graphviz:fedora31"

fedora32-build:
    <<: *rpm_build_definition
    tags:
        - linux
    image: "graphviz/graphviz:fedora32"

fedora33-build:
    <<: *rpm_build_definition
    tags:
        - linux
    image: "graphviz/graphviz:fedora33"

ubuntu18-04-build:
    <<: *deb_build_definition
    tags:
        - linux
    image: "graphviz/graphviz:ubuntu-18.04"

ubuntu19-10-build:
    <<: *deb_build_definition
    tags:
        - linux
    image: "graphviz/graphviz:ubuntu-19.10"

ubuntu20-04-build:
    <<: *deb_build_definition
    tags:
        - linux
    image: "graphviz/graphviz:ubuntu-20.04"

windows-cmake-Win32-release-build:
    <<: *windows_build_definition
    before_script:
        - $Env:generator = "Visual Studio 16 2019"
        - $Env:platform = "Win32"
        - $Env:configuration = "Release"
        - $Env:build_system = "cmake"

windows-cmake-Win32-debug-build:
    <<: *windows_build_definition
    before_script:
        - $Env:generator = "Visual Studio 16 2019"
        - $Env:platform = "Win32"
        - $Env:configuration = "Debug"
        - $Env:build_system = "cmake"

windows-cmake-x64-release-build:
    <<: *windows_build_definition
    before_script:
        - $Env:generator = "Visual Studio 16 2019"
        - $Env:platform = "x64"
        - $Env:configuration = "Release"
        - $Env:build_system = "cmake"

windows-cmake-x64-debug-build:
    <<: *windows_build_definition
    before_script:
        - $Env:generator = "Visual Studio 16 2019"
        - $Env:platform = "x64"
        - $Env:configuration = "Debug"
        - $Env:build_system = "cmake"

windows-msbuild-Win32-release-build:
    <<: *windows_build_definition
    before_script:
        - $Env:platform = "Win32"
        - $Env:configuration = "Release"
        - $Env:build_system = "msbuild"

windows-msbuild-Win32-debug-build:
    <<: *windows_build_definition
    before_script:
        - $Env:platform = "Win32"
        - $Env:configuration = "Debug"
        - $Env:build_system = "msbuild"

meta-data:
    stage: test
    script:
        - CONFIGURE_LOGS=Metadata/*/*/*/configure.log
        - ci/generate-configuration-table.py --output-format html ${CONFIGURE_LOGS} > configuration-long-no-color.html
        - ci/generate-configuration-table.py --output-format html --short ${CONFIGURE_LOGS} > configuration-short-no-color.html
        - ci/generate-configuration-table.py --output-format html --short --color ${CONFIGURE_LOGS} > configuration-short-color-green-red.html
        - ci/generate-configuration-table.py --output-format html --short --colors black:red ${CONFIGURE_LOGS} > configuration-short-color-red-only.html
    artifacts:
        paths:
            - configuration-*.html

ubuntu18-04-test:
    <<: *test_definition
    needs:
        - job: portable-source
          artifacts: true
        - job: "ubuntu18-04-build"
          artifacts: true
    tags:
        - linux
    image: "graphviz/graphviz:ubuntu-18.04"

ubuntu19-10-test:
    <<: *test_definition
    needs:
        - job: portable-source
          artifacts: true
        - job: "ubuntu19-10-build"
          artifacts: true
    tags:
        - linux
    image: "graphviz/graphviz:ubuntu-19.10"

ubuntu20-04-test:
    <<: *test_definition
    needs:
        - job: portable-source
          artifacts: true
        - job: "ubuntu20-04-build"
          artifacts: true
    tags:
        - linux
    image: "graphviz/graphviz:ubuntu-20.04"

centos6-test:
    <<: *test_definition
    needs:
        - job: portable-source
          artifacts: true
        - job: "centos6-build"
          artifacts: true
    tags:
        - linux
    image: "graphviz/graphviz:centos6"

centos7-test:
    <<: *test_definition
    needs:
        - job: portable-source
          artifacts: true
        - job: "centos7-build"
          artifacts: true
    tags:
        - linux
    image: "graphviz/graphviz:centos7"

centos8-test:
    <<: *test_definition
    needs:
        - job: portable-source
          artifacts: true
        - job: "centos8-build"
          artifacts: true
    tags:
        - linux
    image: "graphviz/graphviz:centos8"

fedora29-test:
    <<: *test_definition
    needs:
        - job: portable-source
          artifacts: true
        - job: "fedora29-build"
          artifacts: true
    tags:
        - linux
    image: "graphviz/graphviz:fedora29"

fedora30-test:
    <<: *test_definition
    needs:
        - job: portable-source
          artifacts: true
        - job: "fedora30-build"
          artifacts: true
    tags:
        - linux
    image: "graphviz/graphviz:fedora30"

fedora31-test:
    <<: *test_definition
    needs:
        - job: portable-source
          artifacts: true
        - job: "fedora31-build"
          artifacts: true
    tags:
        - linux
    image: "graphviz/graphviz:fedora31"

fedora32-test:
    <<: *test_definition
    needs:
        - job: portable-source
          artifacts: true
        - job: "fedora32-build"
          artifacts: true
    tags:
        - linux
    image: "graphviz/graphviz:fedora32"

fedora33-test:
    <<: *test_definition
    needs:
        - job: portable-source
          artifacts: true
        - job: "fedora33-build"
          artifacts: true
    tags:
        - linux
    image: "graphviz/graphviz:fedora33"

deployment:
    stage: deploy
    script:
        - GV_VERSION=$( cat VERSION )
        - COLLECTION=$( cat COLLECTION )
        - eval $(ssh-agent -s)
        - cat "$DEPLOY_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
        - mkdir -p ~/.ssh
        - chmod 700 ~/.ssh
        - ssh-keyscan "$DEPLOY_HOST" >> ~/.ssh/known_hosts
        - chmod 644 ~/.ssh/known_hosts
        - chmod -R o-rwx Packages
        - chmod -R g-wx Packages
        - chmod -R g+X Packages
        - ssh "$DEPLOY_USER"@"$DEPLOY_HOST" 'rm -rf Packages/'"$COLLECTION"'/{fedora,centos,ubuntu,windows}'
        - scp -r Packages/* "$DEPLOY_USER"@"$DEPLOY_HOST"':'Packages/
        - ssh "$DEPLOY_USER"@"$DEPLOY_HOST" 'for i in Packages/'"$COLLECTION"'/{fedora,centos}/*/{source,os/*,debug/*}; do createrepo $i; done'
        - scp graphviz-fedora.repo graphviz-centos.repo "$DEPLOY_USER"@"$DEPLOY_HOST"':'Packages/
        - ssh "$DEPLOY_USER"@"$DEPLOY_HOST" mkdir -p Packages/"$COLLECTION"/portable_source
        - md5sum graphviz-"$GV_VERSION".tar.gz >graphviz-"$GV_VERSION".tar.gz.md5
        - scp graphviz-"$GV_VERSION".tar.gz graphviz-"$GV_VERSION".tar.gz.md5 "$DEPLOY_USER"@"$DEPLOY_HOST"':'Packages/"$COLLECTION"/portable_source/
    only:
        - master@graphviz/graphviz
    tags:
        - graphviz,deploy
